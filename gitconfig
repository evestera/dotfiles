[alias]
	unstage = reset HEAD
	patch = add --patch
	preview = diff --cached
	lg = log --all --oneline --graph --decorate
	lx = !git lg -10
	lgd = !git lg --date-order
	lv = log --all --graph --date=relative --format='%C(auto)%h%d%Creset %s %Cblue<%an> %Cgreen(%cd)%Creset'
	st = status -s
	co = checkout
	com = checkout master
	cod = checkout develop
	cob = checkout -b
	pc = push -u origin HEAD
	cp = cherry-pick

	pwd = "!pwd"
	basename = "!basename $(pwd)"

	amend = commit --amend
	credit = commit --amend --author
	aua = !git add --update && git commit --amend --no-edit
	apply-branch = merge --squash --no-commit
	track = !git branch -u origin/$(git branch-name)

	# git retag - Remove the old tag with this name and tag the latest commit with it:
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"
	alias = !git config --list | fgrep alias. | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | cut -c -80
	new-alias = "!r() { git config --global alias.$1 \"${*:2}\"; }; r"

	assume-unchanged = update-index --assume-unchanged
	no-assume-unchanged = update-index --no-assume-unchanged
	ls-assume-unchanged = !git ls-files -v | grep "^h" | cut -c 3-

	branch-name = rev-parse --abbrev-ref HEAD
	# git pm - "protect master" - Add pre-commit hook to stop commits to master:
	pm = "!echo '\n \
		if [ $(git branch-name) = \"master\" ]; then \
			echo Branch master is protected!; \
			echo Create a new branch before committing; \
			exit 1; \
		fi \
	\n' >>.git/hooks/pre-commit && chmod +x .git/hooks/pre-commit"
	update = "!r() { \
		bname=$(git branch-name); \
		git com && git pull --ff-only origin master && git co $bname && git rebase master; \
	}; r"
	mom = "!r() { bname=$(git branch-name); git com && git merge --ff-only $bname; }; r"
[push]
	default = current
[fetch]
	prune = true
[core]
	excludesfile = ~/dotfiles/gitignore
[include]
	path = ~/dotfiles/gitconfig.local
[color "status"]
	added = green
	changed = yellow bold
	untracked = red bold
[merge]
	tool = intellij
[mergetool "intellij"]
	cmd = idea merge $(cd $(dirname "$LOCAL") && pwd)/$(basename "$LOCAL") $(cd $(dirname "$REMOTE") && pwd)/$(basename "$REMOTE") $(cd $(dirname "$BASE") && pwd)/$(basename "$BASE") $(cd $(dirname "$MERGED") && pwd)/$(basename "$MERGED")
	trustExitCode = true
[diff]
	tool = intellij
[difftool "intellij"]
	cmd = idea diff $(cd $(dirname "$LOCAL") && pwd)/$(basename "$LOCAL") $(cd $(dirname "$REMOTE") && pwd)/$(basename "$REMOTE")
