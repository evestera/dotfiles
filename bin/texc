#!/usr/bin/env python

import subprocess
import argparse
import logging
import os
import re
import sys

from distutils import spawn

def err(s):
    return '\033[1;31m' + s + '\033[0m'

def warn(s):
    return '\033[1;33m' + s + '\033[0m'

def success(s):
    return '\033[1;32m' + s + '\033[0m'

def main(arguments):
    parser = argparse.ArgumentParser(description='Compile a LaTeX document')
    parser.add_argument('file',
        help='file to compile')
    parser.add_argument('-v', '--verbose', action='store_true',
        help='print way too much stuff')
    parser.add_argument('-k', '--keep', action='store_true',
        help='keep all generated files (.aux, .log, etc)')
    parser.add_argument('-m', '--minted', action='store_true',
        help='use minted for code snippets')

    args = parser.parse_args(arguments)

    logging.basicConfig(format='%(module)s - %(funcName)s - %(message)s')
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)

    inpath, extension = os.path.splitext(args.file)
    texfile = os.path.abspath(args.file)
    os.chdir(os.path.dirname(texfile))

    if not os.path.isfile(texfile):
        print 'No such file: ' + args.file
        return

    if not spawn.find_executable('lualatex'):
        print err('Could not find executable. Have you installed LaTeX?')
        return

    initialfiles = set(os.listdir('.'))

    command = ['lualatex']
    command += ['-file-line-error']
    command += ['-synctex=1']
    if args.minted:
        command += ['-shell-escape']
    command += ['--jobname', os.path.basename(inpath)]
    command += [texfile]

    print '\nRunning pdflatex:\n  ' + ' '.join(command)
    proc = subprocess.Popen(command,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT)

    stdout, stderr = proc.communicate()
    errors = re.findall('(.*Error.*)', stdout)
    errors += re.findall('(.*?):([0-9]*?): ([^.!]*)', stdout)
    warnings = re.findall('.*[Ww]arning.*', stdout)

    logging.debug(stdout)

    if len(errors) > 0:
        print err('Compilation ended with {} errors:'.format(len(errors)))
        linecols = str(max(map(lambda x: len(x[1]), errors)))
        for error in errors:
            if error[0].startswith('!'):
                print error
            else:
                print ('Error on line {line:>' + linecols + '} of {file}: {err}').format(
                    file = os.path.relpath(error[0]),
                    line = error[1],
                    err = error[2].replace('\n', ''))
        if len(warnings) > 0:
            print warn('And {} warnings:'.format(len(warnings)))
            for warning in warnings:
                print warning
    elif len(warnings) > 0:
        print warn('There were {} warnings:'.format(len(warnings)))
        for warning in warnings:
            print warning
    else:
        print success('Compilation finished with no errors')
        print re.findall('Output written.*', stdout)[0]

    finalfiles = set(os.listdir('.'))
    newfiles = finalfiles - initialfiles
    if not args.keep:
        for filename in filter(lambda x: not x.endswith('.pdf'), newfiles):
            logging.debug('Deleting file: ' + filename)
            os.remove(filename)

if __name__ == '__main__':
    main(sys.argv[1:])
